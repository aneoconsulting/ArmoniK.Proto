syntax = "proto3";

import "objects.proto";
import "task_status.proto";

option csharp_namespace = "ArmoniK.Api.gRPC.V1";
package ArmoniK.api.grpc.v1;

service Submitter{
	rpc GetServiceConfiguration (Empty) returns (Configuration); 

	rpc CreateSession (CreateSessionRequest) returns (CreateSessionReply);
	rpc CancelSession (Session) returns (Empty);

	rpc CreateSmallTasks (CreateSmallTaskRequest) returns (CreateTaskReply);
	rpc CreateLargeTasks (stream CreateLargeTaskRequest) returns (CreateTaskReply);

	// rpc ListTasks (TaskFilter) returns (TaskIdList);
	// rpc CountTasks (TaskFilter) returns (Count); 
	rpc TryGetResultStream (ResultRequest) returns (stream ResultReply);
	rpc TryGetTaskOutput (ResultRequest) returns (Output);
	rpc WaitForAvailability (ResultRequest) returns (AvailabilityReply);
	rpc WaitForCompletion (WaitRequest) returns (Count);
	rpc CancelTasks (TaskFilter) returns (Empty); 
	rpc GetStatus (GetStatusrequest) returns (GetStatusReply);

	// Applications
	rpc GetApplication(GetApplicationRequest) returns (GetApplicationResponse);
	rpc GetApplications(GetApplicationsRequest) returns (GetApplicationsResponse);


	// Sessions
	rpc GetSession(GetSessionRequest) returns (GetSessionResponse);
	rpc GetSessions(GetSessionsRequest) returns (GetSessionsResponse);
	rpc CloseSession(CloseSessionRequest) returns (CloseSessionResponse);
	rpc ReOpenSession(ReOpenSessionRequest) returns (ReOpenSessionResponse);
	rpc CountSessions(CountSessionsRequest) returns (CountSessionsResponse);

	// Tasks
	rpc GetTask(GetTaskRequest) returns (GetTaskResponse);
	rpc GetTasks(GetTasksRequest) returns (GetTasksResponse);
	rpc CountTasks(CountTasksRequest) returns (CountTasksResponse);
}

/*
*	Application messages
*/
message GetApplicationRequest {
	Application.id id = 1;
}

message GetApplicationResponse {
	Application data = 1;
}

message GetApplicationsRequest {
	Pagination pagination = 1;
	optional Filter filter = 2;
}

message GetApplicationsResponse {
	PaginationMeta pagination = 1;
	ApplicationsList data = 2;
}

/*
*	Session messages
*/
message GetSessionRequest {
	Session.id id = 1;
}

message GetSessionResponse {
	Session data = 1;
}

message GetSessionsRequest {
	Pagination pagination = 1;
	optional Filter filter = 2;
}

message GetSessionsResponse {
	PaginationMeta pagination = 1;
	SessionsList data = 2;
}

message CloseSessionRequest {
	Session.id id = 1;
}

message CloseSessionResponse {
	// TODO: Create a status message or return full session ?
	Session data = 1;
}

message ReOpenSessionRequest {
	Session.id id = 1;
}

message ReOpenSessionResponse {
	// TODO: Create a status message or return full session ?
	Session data = 1;
}

message CountSessionsRequest {
	SessionFilter filter = 1;
}

message CountSessionsResponse {
	fixed64 count = 1;
}

/*
*	Tasls messages
*/
message GetTaskRequest {
	Task.id id = 1;
}

message GetTaskResponse {
	Task data = 1;
}

message GetTasksRequest {
	Pagination pagination = 1;
	optional Filter filter = 2;
}

message GetTasksResponse {
	PaginationMeta pagination = 1;
	TasksList data = 2;
}

message CountTasksRequest {
	TaskFilter filter = 1;
}

message CountTasksResponse {
	fixed64 count = 1;
}

// -------------------------

// message Session {
// 	string Id = 1;
// }

message CreateSessionRequest {
	string id = 1;
	TaskOptions default_task_option = 3;
}

message CreateSessionReply {
	oneof result {
		Empty Ok = 1;
		string Error = 2;
	}
}


message CreateSmallTaskRequest {
	string session_id = 1;
	TaskOptions task_options = 2;
	repeated TaskRequest task_requests = 3;
}

message CreateLargeTaskRequest {
	message InitRequest {
		string session_id = 1;
		TaskOptions task_options = 2;
	}
	oneof Type {
		InitRequest init_request = 1;
		InitTaskRequest init_task = 2;
		DataChunk task_payload = 3;
	}
}

// message TaskFilter {
// 	message IdsRequest {
// 		repeated string ids = 1;
// 	}
// 	message StatusesRequest {
// 		repeated TaskStatus.TaskStatus Statuses = 1;
// 	}
// 	oneof Ids {
// 		IdsRequest session = 1;
// 		IdsRequest dispatch = 2;
// 		IdsRequest task = 3;
// 	}
// 	oneof Statuses {
// 		StatusesRequest included = 4;
// 		StatusesRequest excluded = 5;
// 	}
// }

message GetStatusrequest{
	string task_id = 1;
}

message GetStatusReply {
	TaskStatus.TaskStatus status = 2;
}

message ResultReply {
	oneof Type {
		DataChunk result = 1;
		TaskError error = 2;
		string not_completed_task = 3;
	}
}

message AvailabilityReply {
	oneof Type {
		Empty ok = 1;
		TaskError error = 2;
		string not_completed_task = 3;
	}
}

message WaitRequest {
	TaskFilter Filter = 1;
	bool stop_on_first_task_error = 2;
	bool stop_on_first_task_cancellation = 3;
}

