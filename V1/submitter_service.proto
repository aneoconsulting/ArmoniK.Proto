syntax = "proto3";

import "objects.proto";
import "task_status.proto";

option csharp_namespace = "ArmoniK.Api.gRPC.V1";
package ArmoniK.api.grpc.v1;

service Submitter{
	rpc GetServiceConfiguration (Empty) returns (ConfigurationReply); 

	rpc CreateSession (CreateSessionRequest) returns (CreateSessionReply);
	rpc CancelSession (SessionId) returns (Empty);

	rpc CreateSmallTasks (CreateSmallTaskRequest) returns (CreateTaskReply);
	rpc CreateLargeTasks (stream CreateLargeTaskRequest) returns (CreateTaskReply);

	rpc ListTasks (TaskFilter) returns (TaskIdList);// will also return subtasks
	rpc CountTasks (TaskFilter) returns (Count); // will also return subtasks
	rpc TryGetResult (ResultRequest) returns (stream ResultReply);
	rpc WaitForAvailability (ResultRequest) returns (AvailabilityReply);
	rpc WaitForCompletion (WaitRequest) returns (Count); // will also wait subtasks
	rpc CancelTask (TaskFilter) returns (Empty); // also cancels all subtasks
	rpc GetStatus (GetStatusrequest) returns (GetStatusReply);
}

message ConfigurationReply{
	int32 data_chunk_max_size = 1;
}

message SessionId {
	string session = 1;
	string parent_task_id = 2;
}

message CreateSessionRequest {
	string id = 1;
	TaskOptions default_task_option = 3;
}

message CreateSessionReply {
	oneof result {
		Empty Ok = 1;
		string Error = 2;
	}
}


message CreateSmallTaskRequest {
	string session_id = 1;
	string parent_task_id = 2;
	TaskOptions task_options = 3;
	repeated TaskRequest task_requests = 4;
}

message CreateLargeTaskRequest {
	message InitRequest {
		string session_id = 1;
		string parent_task_id = 2;
		TaskOptions task_options = 3;
	}
	oneof Type {
		InitRequest init_request = 1;
		InitTaskRequest init_task = 2;
		DataChunk task_payload = 3;
	}
}

message TaskFilter {
	message KnownIdsRequest {
		repeated string task_ids = 1;
	}
	message UnknownIdsRequest {
		string session_id = 1;
		repeated string excluded_task_ids = 3;
	}
	message StatusesRequest {
		repeated TaskStatus.TaskStatus IncludedStatuses = 1;
	}
	oneof Ids {
		KnownIdsRequest known = 1;
		UnknownIdsRequest unknown = 2;
	}
	oneof Statuses {
		StatusesRequest included = 3;
		StatusesRequest excluded = 4;
	}
}

message GetStatusrequest{
	string task_id = 1;
}

message GetStatusReply {
	TaskStatus.TaskStatus status = 2;
}

message ResultReply {
	oneof has_result {
		bytes result = 1;
		TaskError error = 2;
		string not_completed_task = 3;
	}
}

message AvailabilityReply {
	oneof has_result {
		Empty ok = 1;
		TaskError error = 2;
		string not_completed_task = 3;
	}
}

message WaitRequest {
	TaskFilter Filter = 1;
	bool stop_on_first_task_error = 2;
	bool stop_on_first_task_cancellation = 3;
}

